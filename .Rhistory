clusterEvalQ(cl, {Rcpp::sourceCpp("library/beverton-hold.cpp")})
parallel::clusterExport(cl, varlist = ls(envir = .GlobalEnv))
clusterEvalQ(cl, {Rcpp::sourceCpp("library/beverton-hold.cpp")})
data =
lapply(1:3000, function(i) {
distP = runif(1, 0, 0.2)
b0_e = runif(1, 0, 1.0)
b1_recr = runif(1, 0, 50)
b2_recr = runif(1, -5, 0.0)
b1_g = runif(1, 0, 1.0)
b2_g = runif(1, -5, 0)
data_tmp =  beverton_holt(N0 = 10,
timesteps = 510,
spinup = 10L,
b0_e = b0_e,
b1_e = 0.0,
b0_k = 100,
b1_k = 4.9,
b1_g = b1_g,
b2_g = b2_g,
b0_r = 30,
b1_recr = b1_recr,
b2_recr = b2_recr,
distP = distP,
Nrep = 1,
opt_x1 = 250)
N = data_tmp$N
E = data_tmp$x1
N[is.na(N)] = 0
return(c(distP,
b0_e,
b1_recr,
b2_recr,
b1_g,
b2_g,
N,
E
))
})
data = (abind::abind(data, along = 0L))
dim(data)
data =
lapply(1:3000, function(i) {
distP = runif(1, 0, 0.2)
b0_e = runif(1, 0, 1.0)
b1_recr = runif(1, 0, 50)
b2_recr = runif(1, -5, 0.0)
b1_g = runif(1, 0, 1.0)
b2_g = runif(1, -5, 0)
data_tmp =  beverton_holt(N0 = 10,
timesteps = 510,
spinup = 10L,
b0_e = b0_e,
b1_e = 0.0,
b0_k = 100,
b1_k = 4.9,
b1_g = b1_g,
b2_g = b2_g,
b0_r = 30,
b1_recr = b1_recr,
b2_recr = b2_recr,
distP = distP,
Nrep = 1,
opt_x1 = 250)
N = data_tmp$N
E = data_tmp$x1
N[is.na(N)] = 0
return(c(distP,
b0_e,
b1_recr,
b2_recr,
b1_g,
b2_g,
N
))
})
data = (abind::abind(data, along = 0L))
dim(data)
KK = 1
obs = data[KK, -(1:6)]
true_pars = data[KK, 1:6]
library(BayesianTools)
logLik = function(par) {
ll =
replicate(50, {
data_tmp =  beverton_holt(N0 = 10,
timesteps = 510,
spinup = 10L,
b0_e = par[2],
b1_e = 0.0,
b0_k = 100,
b1_k = 4.9,
b1_g = par[5],
b2_g = par[6],
b0_r = 30,
b1_recr = par[3],
b2_recr = par[4],
distP = par[1],
Nrep = 1,
opt_x1 = 250)$N
sum((data_tmp-obs$N)**2)/500
})
return(-mean(ll))
}
bs = createBayesianSetup(logLik, prior = createUniformPrior(c(0,0,0,-5,0,-5), c(0.2, 1.0, 50, 0.0, 1.0, 0)))
res = runMCMC(bs, settings = list(iterations = 50000))
logLik = function(par) {
ll =
replicate(50, {
data_tmp =  beverton_holt(N0 = 10,
timesteps = 510,
spinup = 10L,
b0_e = par[2],
b1_e = 0.0,
b0_k = 100,
b1_k = 4.9,
b1_g = par[5],
b2_g = par[6],
b0_r = 30,
b1_recr = par[3],
b2_recr = par[4],
distP = par[1],
Nrep = 1,
opt_x1 = 250)$N
sum((data_tmp-obs)**2)/500
})
return(-mean(ll))
}
bs = createBayesianSetup(logLik, prior = createUniformPrior(c(0,0,0,-5,0,-5), c(0.2, 1.0, 50, 0.0, 1.0, 0)))
res = runMCMC(bs, settings = list(iterations = 50000))
parallel::clusterExport(cl, varlist = ls(envir = .GlobalEnv))
clusterEvalQ(cl, {library(BayesianTools);Rcpp::sourceCpp("library/beverton-hold.cpp")})
results = parSapply(cl, 1:nrow(data), function(KK) {
obs = data[KK, -(1:6)]
true_pars = data[KK, 1:6]
logLik = function(par) {
ll =
replicate(50, {
data_tmp =  beverton_holt(N0 = 10,
timesteps = 510,
spinup = 10L,
b0_e = par[2],
b1_e = 0.0,
b0_k = 100,
b1_k = 4.9,
b1_g = par[5],
b2_g = par[6],
b0_r = 30,
b1_recr = par[3],
b2_recr = par[4],
distP = par[1],
Nrep = 1,
opt_x1 = 250)$N
sum((data_tmp-obs)**2)/500
})
return(-mean(ll))
}
bs = createBayesianSetup(logLik, prior = createUniformPrior(c(0,0,0,-5,0,-5), c(0.2, 1.0, 50, 0.0, 1.0, 0)))
res = runMCMC(bs, settings = list(iterations = 500))
inferred = MAP(res, start = 50)$par
return(cbind(inferred, true_pars))
})
results = parSapply(cl, 1:30, function(KK) {
obs = data[KK, -(1:6)]
true_pars = data[KK, 1:6]
logLik = function(par) {
ll =
replicate(50, {
data_tmp =  beverton_holt(N0 = 10,
timesteps = 510,
spinup = 10L,
b0_e = par[2],
b1_e = 0.0,
b0_k = 100,
b1_k = 4.9,
b1_g = par[5],
b2_g = par[6],
b0_r = 30,
b1_recr = par[3],
b2_recr = par[4],
distP = par[1],
Nrep = 1,
opt_x1 = 250)$N
sum((data_tmp-obs)**2)/500
})
return(-mean(ll))
}
bs = createBayesianSetup(logLik, prior = createUniformPrior(c(0,0,0,-5,0,-5), c(0.2, 1.0, 50, 0.0, 1.0, 0)))
res = runMCMC(bs, settings = list(iterations = 500))
inferred = MAP(res, start = 50)$par
return(cbind(inferred, true_pars))
})
results
dim(results)
results = parLapply(cl, 1:30, function(KK) {
obs = data[KK, -(1:6)]
true_pars = data[KK, 1:6]
logLik = function(par) {
ll =
replicate(50, {
data_tmp =  beverton_holt(N0 = 10,
timesteps = 510,
spinup = 10L,
b0_e = par[2],
b1_e = 0.0,
b0_k = 100,
b1_k = 4.9,
b1_g = par[5],
b2_g = par[6],
b0_r = 30,
b1_recr = par[3],
b2_recr = par[4],
distP = par[1],
Nrep = 1,
opt_x1 = 250)$N
sum((data_tmp-obs)**2)/500
})
return(-mean(ll))
}
bs = createBayesianSetup(logLik, prior = createUniformPrior(c(0,0,0,-5,0,-5), c(0.2, 1.0, 50, 0.0, 1.0, 0)))
res = runMCMC(bs, settings = list(iterations = 500))
inferred = MAP(res, start = 50)$par
return(cbind(inferred, true_pars))
})
results
abind::abind(results)
results = abind::abind(results)
dim(results)
results = parLapply(cl, 1:30, function(KK) {
obs = data[KK, -(1:6)]
true_pars = data[KK, 1:6]
logLik = function(par) {
ll =
replicate(50, {
data_tmp =  beverton_holt(N0 = 10,
timesteps = 510,
spinup = 10L,
b0_e = par[2],
b1_e = 0.0,
b0_k = 100,
b1_k = 4.9,
b1_g = par[5],
b2_g = par[6],
b0_r = 30,
b1_recr = par[3],
b2_recr = par[4],
distP = par[1],
Nrep = 1,
opt_x1 = 250)$N
sum((data_tmp-obs)**2)/500
})
return(-mean(ll))
}
bs = createBayesianSetup(logLik, prior = createUniformPrior(c(0,0,0,-5,0,-5), c(0.2, 1.0, 50, 0.0, 1.0, 0)))
res = runMCMC(bs, settings = list(iterations = 500))
inferred = MAP(res, start = 50)$par
return(cbind(inferred, true_pars))
})
results = abind::abind(results, along = 0L)
resukts
resukts
dim(results)
plot(results[,1,])
plot(results[,2,])
plot(results[,3,])
plot(results[,4,])
plot(results[,5,])
plot(results[,6,])
plot(results[,3,])
results = readRDS("results/MCMC_3000.RDS")
abind::abind(results, along = 0L)
results = abind::abind(results, along = 0L)
dim(results)
sapply(1:6, function(i) cor(results[,i,]) )
sapply(1:6, function(i) cor(results[,i,1], results[,i,2]) )
plot(results[,1,1], results[,1,2])
plot(results[,2,1], results[,2,2])
plot(results[,3,1], results[,3,2])
plot(results[,4,1], results[,4,2])
plot(results[,5,1], results[,5,2])
res = readRDS("results/results_10000.RDS")
lapply(res, function(r) sapply(1:ncol(r$results$obs), function(i) cor(r$results$obs[,i], r$results$pred[,i], method = "spearman")))
res = readRDS("results/MCMC_3000.RDS")
abind::abind(res, along = 0L)
res = abind::abind(res, along = 0L)
dim(res)
sapply(1:6, function(i) cor(results[,i,1], results[,i,2]) )
res = readRDS("results/results_2000.RDS")
lapply(res, function(r) sapply(1:ncol(r$results$obs), function(i) cor(r$results$obs[,i], r$results$pred[,i], method = "spearman")))
res = readRDS("results/results_10000.RDS")
lapply(res, function(r) sapply(1:ncol(r$results$obs), function(i) cor(r$results$obs[,i], r$results$pred[,i], method = "spearman")))
res = readRDS("results/results_2000.RDS")
lapply(res, function(r) sapply(1:ncol(r$results$obs), function(i) cor(r$results$obs[,i], r$results$pred[,i], method = "spearman")))
unlist(lapply(res, function(r) sapply(1:ncol(r$results$obs), function(i) cor(r$results$obs[,i], r$results$pred[,i], method = "spearman"))))
res = readRDS("results/results_10000.RDS")
d1 = unlist(lapply(res, function(r) sapply(1:ncol(r$results$obs), function(i) cor(r$results$obs[,i], r$results$pred[,i], method = "spearman"))))
res = readRDS("results/results_2000.RDS")
d2 = unlist(lapply(res, function(r) sapply(1:ncol(r$results$obs), function(i) cor(r$results$obs[,i], r$results$pred[,i], method = "spearman"))))
plot(d1, d2)
abline( c(0, 1))
################################################################################
## Project: ForDem
## Script purpose: example for running ForDem
## Date:
## Author:
################################################################################
selected_species_pars <-
data.frame(
stringsAsFactors = FALSE,
spID = c(0L,1L,2L,3L,4L,5L,6L,7L,
8L,9L,10L,11L,12L,13L,14L,15L,16L,17L,18L,19L,
20L,21L,22L,23L,24L,25L,26L,27L,28L,29L),
species = c("Abies alba","Larix decidua",
"Picea abies","Pinus cembra","Pinus montana",
"Pinus sylvestris","Taxus baccata","Acer campestre",
"Acer platanoides","Acer pseudoplatanus","Alnus glutinosa",
"Alnus incana","Alnus viridis","Betula pendula",
"Carpinus betulus","Castanea sativa","Corylus avellana",
"Fagus sylvatica","Fraxinus excelsior","Populus nigra",
"Populus tremula","Quercus petraea","Quercus pubescens",
"Quercus robur","Salix alba","Sorbus aria","Sorbus aucuparia",
"Tilia cordata","Tilia platyphyllos","Ulmus glabra"),
kHMax = c(60L,54L,63L,26L,23L,48L,
22L,25L,35L,40L,40L,25L,6L,30L,35L,35L,15L,52L,
42L,40L,42L,50L,25L,52L,35L,23L,27L,40L,40L,
43L),
kDMax = c(200L,250L,200L,200L,50L,
150L,350L,150L,200L,250L,150L,100L,25L,100L,150L,
350L,50L,250L,250L,250L,150L,350L,150L,350L,250L,
100L,100L,350L,350L,300L),
kG = c(296L,400L,342L,198L,239L,
393L,175L,210L,360L,338L,380L,218L,476L,448L,360L,
375L,245L,307L,363L,394L,390L,378L,226L,376L,
403L,230L,205L,365L,365L,361L),
kDDMin = c(641L,323L,385L,323L,436L,
610L,1011L,1062L,1042L,898L,898L,610L,272L,610L,
898L,1237L,898L,723L,980L,662L,610L,785L,1011L,
1042L,1062L,898L,498L,1339L,1339L,1062L),
kLy = c(0.03,0.5,0.05,0.075,0.5,
0.4,0.03,0.2,0.075,0.05,0.2,0.2,0.3,0.5,0.075,0.1,
0.2,0.03,0.075,0.3,0.3,0.2,0.3,0.2,0.3,0.3,
0.1,0.075,0.075,0.075),
kLa = c(1L,9L,5L,5L,9L,8L,1L,6L,
4L,3L,6L,7L,7L,9L,4L,5L,6L,1L,5L,7L,7L,7L,
8L,7L,7L,8L,6L,5L,5L,5L),
kA1 = c(0.23,0.1,0.23,0.23,0.23,
0.17,0.23,0.1,0.06,0.06,0.1,0.1,0.1,0.08,0.06,
0.06,0.06,0.06,0.1,0.1,0.1,0.06,0.06,0.06,0.08,0.1,
0.08,0.06,0.06,0.06),
kA2 = c(1.56,1.43,1.56,1.56,1.56,
1.4,1.56,1.43,1.7,1.7,1.43,1.43,1.43,1.43,1.7,
1.7,1.7,1.7,1.43,1.43,1.43,1.7,1.7,1.7,1.43,1.43,
1.43,1.7,1.7,1.7),
kC1 = c(0.45,0.35,0.45,0.45,0.45,
0.45,0.45,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,
0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,
0.35,0.35,0.35,0.35,0.35,0.35),
kC2 = c(6L,12L,6L,6L,6L,6L,6L,
12L,12L,12L,12L,12L,12L,12L,12L,12L,12L,12L,12L,
12L,12L,12L,12L,12L,12L,12L,12L,12L,12L,12L)
)
cohortsIN <- list(
list(
cohortID = 1,
spID = 1,
nTrs = 1,
dbh = 1
),
list(
cohortID = 2,
spID = 17,
nTrs = 4,
dbh = 30
)
)
parsModel <- list(
timesteps = 500,
actualSpecies = c(0,13,1,17,5),
baseReg = 10,
bgMort = 2.3,
distP = 0.01,
env = 0.7,
patchesN = 10,
areaHectar = 0.01,
initPop = cohortsIN,
speciesPars = selected_species_pars
)
library("Rcpp")
sourceCpp("library/fordem.cpp")
system.time(
runModel(pars = parsModel, speciesPars = selected_species_pars)
)
library(jointprof)
out_file <- tempfile("jointprof", fileext = ".out")
Rprof(out_file, gc.profiling = TRUE)
out <- capture.output(
runModel(pars = parsModel, speciesPars = selected_species_pars)
)
Rprof(NULL)
out
out_file
out_file <- tempfile("jointprof", fileext = ".out", tmpdir = ".")
Rprof(out_file, gc.profiling = TRUE)
out <- capture.output(
runModel(pars = parsModel, speciesPars = selected_species_pars)
)
Rprof(NULL)
start_profiler(out_file)
start_profiler(out_file)
################################################################################
## Project: ForDem
## Script purpose: example for running ForDem
## Date:
## Author:
################################################################################
selected_species_pars <-
data.frame(
stringsAsFactors = FALSE,
spID = c(0L,1L,2L,3L,4L,5L,6L,7L,
8L,9L,10L,11L,12L,13L,14L,15L,16L,17L,18L,19L,
20L,21L,22L,23L,24L,25L,26L,27L,28L,29L),
species = c("Abies alba","Larix decidua",
"Picea abies","Pinus cembra","Pinus montana",
"Pinus sylvestris","Taxus baccata","Acer campestre",
"Acer platanoides","Acer pseudoplatanus","Alnus glutinosa",
"Alnus incana","Alnus viridis","Betula pendula",
"Carpinus betulus","Castanea sativa","Corylus avellana",
"Fagus sylvatica","Fraxinus excelsior","Populus nigra",
"Populus tremula","Quercus petraea","Quercus pubescens",
"Quercus robur","Salix alba","Sorbus aria","Sorbus aucuparia",
"Tilia cordata","Tilia platyphyllos","Ulmus glabra"),
kHMax = c(60L,54L,63L,26L,23L,48L,
22L,25L,35L,40L,40L,25L,6L,30L,35L,35L,15L,52L,
42L,40L,42L,50L,25L,52L,35L,23L,27L,40L,40L,
43L),
kDMax = c(200L,250L,200L,200L,50L,
150L,350L,150L,200L,250L,150L,100L,25L,100L,150L,
350L,50L,250L,250L,250L,150L,350L,150L,350L,250L,
100L,100L,350L,350L,300L),
kG = c(296L,400L,342L,198L,239L,
393L,175L,210L,360L,338L,380L,218L,476L,448L,360L,
375L,245L,307L,363L,394L,390L,378L,226L,376L,
403L,230L,205L,365L,365L,361L),
kDDMin = c(641L,323L,385L,323L,436L,
610L,1011L,1062L,1042L,898L,898L,610L,272L,610L,
898L,1237L,898L,723L,980L,662L,610L,785L,1011L,
1042L,1062L,898L,498L,1339L,1339L,1062L),
kLy = c(0.03,0.5,0.05,0.075,0.5,
0.4,0.03,0.2,0.075,0.05,0.2,0.2,0.3,0.5,0.075,0.1,
0.2,0.03,0.075,0.3,0.3,0.2,0.3,0.2,0.3,0.3,
0.1,0.075,0.075,0.075),
kLa = c(1L,9L,5L,5L,9L,8L,1L,6L,
4L,3L,6L,7L,7L,9L,4L,5L,6L,1L,5L,7L,7L,7L,
8L,7L,7L,8L,6L,5L,5L,5L),
kA1 = c(0.23,0.1,0.23,0.23,0.23,
0.17,0.23,0.1,0.06,0.06,0.1,0.1,0.1,0.08,0.06,
0.06,0.06,0.06,0.1,0.1,0.1,0.06,0.06,0.06,0.08,0.1,
0.08,0.06,0.06,0.06),
kA2 = c(1.56,1.43,1.56,1.56,1.56,
1.4,1.56,1.43,1.7,1.7,1.43,1.43,1.43,1.43,1.7,
1.7,1.7,1.7,1.43,1.43,1.43,1.7,1.7,1.7,1.43,1.43,
1.43,1.7,1.7,1.7),
kC1 = c(0.45,0.35,0.45,0.45,0.45,
0.45,0.45,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,
0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,
0.35,0.35,0.35,0.35,0.35,0.35),
kC2 = c(6L,12L,6L,6L,6L,6L,6L,
12L,12L,12L,12L,12L,12L,12L,12L,12L,12L,12L,12L,
12L,12L,12L,12L,12L,12L,12L,12L,12L,12L,12L)
)
cohortsIN <- list(
list(
cohortID = 1,
spID = 1,
nTrs = 1,
dbh = 1
),
list(
cohortID = 2,
spID = 17,
nTrs = 4,
dbh = 30
)
)
parsModel <- list(
timesteps = 500,
actualSpecies = c(0,13,1,17,5),
baseReg = 10,
bgMort = 2.3,
distP = 0.01,
env = 0.7,
patchesN = 10,
areaHectar = 0.01,
initPop = cohortsIN,
speciesPars = selected_species_pars
)
library("Rcpp")
sourceCpp("library/fordem.cpp")
library(jointprof)
out_file <- tempfile("jointprof", fileext = ".out", tmpdir = ".")
start_profiler(out_file)
?proffer::pprof_path
pprof_path(verbose = TRUE)
library(proffer)
pprof_path(verbose = TRUE)
library(Rgperftools)
out_file <- tempfile("jointprof", fileext = ".out", tmpdir = ".")
start_profiler(out_file)
out <- capture.output(
runModel(pars = parsModel, speciesPars = selected_species_pars)
)
stop_profiler()

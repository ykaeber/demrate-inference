names(result)
names(result) == paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
result
names(result[[1]]) == paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
names(result[[1]]) = paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
result
result = list(res)
names(result) = paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
result$`Growth+Recruitment`
cl = makeCluster(8L)
nodes = unlist(parallel::clusterEvalQ(cl, paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')))
data_simulate = data.frame(
Growth = c(1L, 0L, 0L, 0L, 1L, 0L, 0L, rep(1L, 5L)),
Mortality = c(0L, 1L, rep(0L, 3L), 1L, 0L, 1L, 1L, 0L, 1L, 1L),
Recruitment = c(0L, 0L, 1L, rep(0L, 3L), 1L, 0L, 0L, rep(1L, 3L)),
Disturbance = c(rep(0L, 3L), rep(1L, 4L), 0L, 1L, 0L, 0L, 1L)
)
clusterEvalQ(cl, {source("R/functions.R")})
parallel::clusterExport(cl, varlist = ls(envir = .GlobalEnv))
results = parLapply(cl, 1:12, function(nodes) {
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
tmp = (data_simulate[i, ])
data =
lapply(1:100, function(i) {
b0_g = ifelse(tmp$Growth,runif(1, 0.01, 1.0), 0.5)
b0_m = ifelse(tmp$Mortality,runif(1, 0.01, 1.0), 0.5)
b0_r = ifelse(tmp$Recruitment,runif(1, 0.05, 1.1), 0.1)
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01)
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data = (abind::abind(data, along = 0L))
data = data[, -c(which(unlist(tmp) != 1, arr.ind = TRUE))]
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 5L, device = dev, split =0.8)
res = sapply(1:ncol(results$obs), function(i) cor(results$obs[,i], results$pred[,i]))
result = list(res)
names(result) = paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
return(result)
})
clusterEvalQ(cl, {library(sjSDM);source("R/functions.R")})
parallel::clusterExport(cl, varlist = ls(envir = .GlobalEnv))
results = parLapply(cl, 1:12, function(nodes) {
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
tmp = (data_simulate[i, ])
data =
lapply(1:100, function(i) {
b0_g = ifelse(tmp$Growth,runif(1, 0.01, 1.0), 0.5)
b0_m = ifelse(tmp$Mortality,runif(1, 0.01, 1.0), 0.5)
b0_r = ifelse(tmp$Recruitment,runif(1, 0.05, 1.1), 0.1)
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01)
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data = (abind::abind(data, along = 0L))
data = data[, -c(which(unlist(tmp) != 1, arr.ind = TRUE))]
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 5L, device = dev, split =0.8)
res = sapply(1:ncol(results$obs), function(i) cor(results$obs[,i], results$pred[,i]))
result = list(res)
names(result) = paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
return(result)
})
library(sjSDM)
library(reticulate)
library(parallel)
source("R/functions.R")
# Set model parameters
K <- 100    # Carrying capacity
N0 <- 10    # Initial population size
cl = makeCluster(8L)
nodes = unlist(parallel::clusterEvalQ(cl, paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')))
data_simulate = data.frame(
Growth = c(1L, 0L, 0L, 0L, 1L, 0L, 0L, rep(1L, 5L)),
Mortality = c(0L, 1L, rep(0L, 3L), 1L, 0L, 1L, 1L, 0L, 1L, 1L),
Recruitment = c(0L, 0L, 1L, rep(0L, 3L), 1L, 0L, 0L, rep(1L, 3L)),
Disturbance = c(rep(0L, 3L), rep(1L, 4L), 0L, 1L, 0L, 0L, 1L)
)
clusterEvalQ(cl, {library(sjSDM);source("R/functions.R")})
parallel::clusterExport(cl, varlist = ls(envir = .GlobalEnv))
results = parLapply(cl, 1:12, function(nodes) {
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
tmp = (data_simulate[i, ])
data =
lapply(1:100, function(i) {
b0_g = ifelse(tmp$Growth,runif(1, 0.01, 1.0), 0.5)
b0_m = ifelse(tmp$Mortality,runif(1, 0.01, 1.0), 0.5)
b0_r = ifelse(tmp$Recruitment,runif(1, 0.05, 1.1), 0.1)
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01)
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data = (abind::abind(data, along = 0L))
data = data[, -c(which(unlist(tmp) != 1, arr.ind = TRUE))]
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 5L, device = dev, split =0.8)
res = sapply(1:ncol(results$obs), function(i) cor(results$obs[,i], results$pred[,i]))
result = list(res)
names(result) = paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
return(result)
})
results = parLapply(cl, 1:12, function(nodes) {
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
tmp = (data_simulate[nodes, ])
data =
lapply(1:100, function(i) {
b0_g = ifelse(tmp$Growth,runif(1, 0.01, 1.0), 0.5)
b0_m = ifelse(tmp$Mortality,runif(1, 0.01, 1.0), 0.5)
b0_r = ifelse(tmp$Recruitment,runif(1, 0.05, 1.1), 0.1)
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01)
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data = (abind::abind(data, along = 0L))
data = data[, -c(which(unlist(tmp) != 1, arr.ind = TRUE))]
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 5L, device = dev, split =0.8)
res = sapply(1:ncol(results$obs), function(i) cor(results$obs[,i], results$pred[,i]))
result = list(res)
names(result) = paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
return(result)
})
results = parLapply(cl, 1:12, function(nodes) {
RNN_model =
reticulate::PyClass("model",
inherit = torch$nn$Module,
defs = list(
`__init__` = function(self, n_response = 1L) {
super()$`__init__`()
self$RNN = torch$nn$GRU(input_size = c(1L),  hidden_size = 32L, num_layers = 2L, batch_first = TRUE)
self$linear2 = torch$nn$Linear(32L*500L, 20L)
self$linear1 = torch$nn$Linear(20L, n_response)
NULL
},
forward = function(self, x) {
x = self$RNN(x)
x = x[[1]]$reshape(c(x[[1]]$shape[0], -1L))
x = self$linear2(x)
x = torch$torch$nn$functional$selu(x)
x = self$linear1(x)
return(x)
}
))
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
tmp = (data_simulate[nodes, ])
data =
lapply(1:100, function(i) {
b0_g = ifelse(tmp$Growth,runif(1, 0.01, 1.0), 0.5)
b0_m = ifelse(tmp$Mortality,runif(1, 0.01, 1.0), 0.5)
b0_r = ifelse(tmp$Recruitment,runif(1, 0.05, 1.1), 0.1)
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01)
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data = (abind::abind(data, along = 0L))
data = data[, -c(which(unlist(tmp) != 1, arr.ind = TRUE))]
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 5L, device = dev, split =0.8)
res = sapply(1:ncol(results$obs), function(i) cor(results$obs[,i], results$pred[,i]))
result = list(res)
names(result) = paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
return(result)
})
results = parLapply(cl, 1:12, function(nodes) {
torch = sjSDM:::pkg.env$fa$torch
RNN_model =
reticulate::PyClass("model",
inherit = torch$nn$Module,
defs = list(
`__init__` = function(self, n_response = 1L) {
super()$`__init__`()
self$RNN = torch$nn$GRU(input_size = c(1L),  hidden_size = 32L, num_layers = 2L, batch_first = TRUE)
self$linear2 = torch$nn$Linear(32L*500L, 20L)
self$linear1 = torch$nn$Linear(20L, n_response)
NULL
},
forward = function(self, x) {
x = self$RNN(x)
x = x[[1]]$reshape(c(x[[1]]$shape[0], -1L))
x = self$linear2(x)
x = torch$torch$nn$functional$selu(x)
x = self$linear1(x)
return(x)
}
))
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
tmp = (data_simulate[nodes, ])
data =
lapply(1:100, function(i) {
b0_g = ifelse(tmp$Growth,runif(1, 0.01, 1.0), 0.5)
b0_m = ifelse(tmp$Mortality,runif(1, 0.01, 1.0), 0.5)
b0_r = ifelse(tmp$Recruitment,runif(1, 0.05, 1.1), 0.1)
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01)
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data = (abind::abind(data, along = 0L))
data = data[, -c(which(unlist(tmp) != 1, arr.ind = TRUE))]
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 5L, device = dev, split =0.8)
res = sapply(1:ncol(results$obs), function(i) cor(results$obs[,i], results$pred[,i]))
result = list(res)
names(result) = paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
return(result)
})
nodes = 1L
torch = sjSDM:::pkg.env$fa$torch
RNN_model =
reticulate::PyClass("model",
inherit = torch$nn$Module,
defs = list(
`__init__` = function(self, n_response = 1L) {
super()$`__init__`()
self$RNN = torch$nn$GRU(input_size = c(1L),  hidden_size = 32L, num_layers = 2L, batch_first = TRUE)
self$linear2 = torch$nn$Linear(32L*500L, 20L)
self$linear1 = torch$nn$Linear(20L, n_response)
NULL
},
forward = function(self, x) {
x = self$RNN(x)
x = x[[1]]$reshape(c(x[[1]]$shape[0], -1L))
x = self$linear2(x)
x = torch$torch$nn$functional$selu(x)
x = self$linear1(x)
return(x)
}
))
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
dev
dev = 0
tmp = (data_simulate[nodes, ])
data =
lapply(1:100, function(i) {
b0_g = ifelse(tmp$Growth,runif(1, 0.01, 1.0), 0.5)
b0_m = ifelse(tmp$Mortality,runif(1, 0.01, 1.0), 0.5)
b0_r = ifelse(tmp$Recruitment,runif(1, 0.05, 1.1), 0.1)
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01)
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data = (abind::abind(data, along = 0L))
data = data[, -c(which(unlist(tmp) != 1, arr.ind = TRUE))]
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 5L, device = dev, split =0.8)
res = sapply(1:ncol(results$obs), function(i) cor(results$obs[,i], results$pred[,i]))
result = list(res)
names(result) = paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
result
results = parLapply(cl, 1:12, function(nodes) {
source("R/functions.R")
torch = sjSDM:::pkg.env$fa$torch
RNN_model =
reticulate::PyClass("model",
inherit = torch$nn$Module,
defs = list(
`__init__` = function(self, n_response = 1L) {
super()$`__init__`()
self$RNN = torch$nn$GRU(input_size = c(1L),  hidden_size = 32L, num_layers = 2L, batch_first = TRUE)
self$linear2 = torch$nn$Linear(32L*500L, 20L)
self$linear1 = torch$nn$Linear(20L, n_response)
NULL
},
forward = function(self, x) {
x = self$RNN(x)
x = x[[1]]$reshape(c(x[[1]]$shape[0], -1L))
x = self$linear2(x)
x = torch$torch$nn$functional$selu(x)
x = self$linear1(x)
return(x)
}
))
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
tmp = (data_simulate[nodes, ])
data =
lapply(1:100, function(i) {
b0_g = ifelse(tmp$Growth,runif(1, 0.01, 1.0), 0.5)
b0_m = ifelse(tmp$Mortality,runif(1, 0.01, 1.0), 0.5)
b0_r = ifelse(tmp$Recruitment,runif(1, 0.05, 1.1), 0.1)
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01)
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data = (abind::abind(data, along = 0L))
data = data[, -c(which(unlist(tmp) != 1, arr.ind = TRUE))]
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 5L, device = dev, split =0.8)
res = sapply(1:ncol(results$obs), function(i) cor(results$obs[,i], results$pred[,i]))
result = list(res)
names(result) = paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
return(result)
})
nodes = unlist(parallel::clusterEvalQ(cl, paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')))
parallel::stopCluster(cl)
cl = makeCluster(8L)
nodes = unlist(parallel::clusterEvalQ(cl, paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')))
data_simulate = data.frame(
Growth = c(1L, 0L, 0L, 0L, 1L, 0L, 0L, rep(1L, 5L)),
Mortality = c(0L, 1L, rep(0L, 3L), 1L, 0L, 1L, 1L, 0L, 1L, 1L),
Recruitment = c(0L, 0L, 1L, rep(0L, 3L), 1L, 0L, 0L, rep(1L, 3L)),
Disturbance = c(rep(0L, 3L), rep(1L, 4L), 0L, 1L, 0L, 0L, 1L)
)
clusterEvalQ(cl, {library(sjSDM);source("R/functions.R")})
parallel::clusterExport(cl, varlist = ls(envir = .GlobalEnv))
results = parLapply(cl, 1:12, function(KK) {
source("R/functions.R")
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
tmp = (data_simulate[KK, ])
data =
lapply(1:100, function(i) {
b0_g = ifelse(tmp$Growth,runif(1, 0.01, 1.0), 0.5)
b0_m = ifelse(tmp$Mortality,runif(1, 0.01, 1.0), 0.5)
b0_r = ifelse(tmp$Recruitment,runif(1, 0.05, 1.1), 0.1)
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01)
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data = (abind::abind(data, along = 0L))
data = data[, -c(which(unlist(tmp) != 1, arr.ind = TRUE))]
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 5L, device = dev, split =0.8)
res = sapply(1:ncol(results$obs), function(i) cor(results$obs[,i], results$pred[,i]))
result = list(res)
names(result) = paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
return(result)
})
nrow(data_simulate)
KK = 12
dev = 0
tmp = (data_simulate[KK, ])
data =
lapply(1:100, function(i) {
b0_g = ifelse(tmp$Growth,runif(1, 0.01, 1.0), 0.5)
b0_m = ifelse(tmp$Mortality,runif(1, 0.01, 1.0), 0.5)
b0_r = ifelse(tmp$Recruitment,runif(1, 0.05, 1.1), 0.1)
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01)
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data = (abind::abind(data, along = 0L))
data = data[, -c(which(unlist(tmp) != 1, arr.ind = TRUE))]
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 5L, device = dev, split =0.8)
res = sapply(1:ncol(results$obs), function(i) cor(results$obs[,i], results$pred[,i]))
res = sapply(1:ncol(results$obs), function(i) cor(results$obs[,i], results$pred[,i]))
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 5L, device = dev, split =0.8)
length(which(unlist(tmp) == 1, arr.ind = TRUE))
dim(data)
c(which(unlist(tmp) != 1, arr.ind = TRUE))
sum(unlist(tmp))
results = parLapply(cl, 1:12, function(KK) {
source("R/functions.R")
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
tmp = (data_simulate[KK, ])
data =
lapply(1:100, function(i) {
b0_g = ifelse(tmp$Growth,runif(1, 0.01, 1.0), 0.5)
b0_m = ifelse(tmp$Mortality,runif(1, 0.01, 1.0), 0.5)
b0_r = ifelse(tmp$Recruitment,runif(1, 0.05, 1.1), 0.1)
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01)
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data = (abind::abind(data, along = 0L))
if(sum(unlist(tmp)) != 4) data = data[, -c(which(unlist(tmp) != 1, arr.ind = TRUE))]
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 5L, device = dev, split =0.8)
res = sapply(1:ncol(results$obs), function(i) cor(results$obs[,i], results$pred[,i]))
result = list(res)
names(result) = paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
return(result)
})
results
8000*0.7
8000*0.6
8000*0.5
5000*1.3
5000*1.4
7000*0.6
7000*0.7
7000*0.8
8000*0.7+
dwa+daw+dwa+d
8000*0.7
results = parLapply(cl, 1:12, function(KK) {
source("R/functions.R")
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
tmp = (data_simulate[KK, ])
data =
lapply(1:8000, function(i) {
b0_g = ifelse(tmp$Growth,      runif(1, 0.01, 1.0), 0.3) # Growth
b0_m = ifelse(tmp$Mortality,   runif(1, 0.01, 1.0), 0.8) # Mort
b0_r = ifelse(tmp$Recruitment, runif(1, 0.05, 1.1), 0.1) # Recruit
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01) # Disturbance
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data = (abind::abind(data, along = 0L))
if(sum(unlist(tmp)) != 4) data = data[, -c(which(unlist(tmp) != 1, arr.ind = TRUE))]
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 1000L, device = dev, split =0.7)
res = sapply(1:ncol(results$obs), function(i) cor(results$obs[,i], results$pred[,i]))
result = list(res)
names(result) = paste0(names(which(unlist(tmp) == 1, arr.ind = TRUE)), collapse = "+")
return(result)
})
results
saveRDS(results, file = "results/results.RDS")
results
saveRDS(results, file = "results/results.RDS")
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 10L, device = dev, split =0.7)
data =
lapply(1:8000, function(i) {
b0_g = ifelse(tmp$Growth,      runif(1, 0.01, 1.0), 0.3) # Growth
b0_m = ifelse(tmp$Mortality,   runif(1, 0.01, 1.0), 0.8) # Mort
b0_r = ifelse(tmp$Recruitment, runif(1, 0.05, 1.1), 0.1) # Recruit
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01) # Disturbance
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data =
lapply(1:100, function(i) {
b0_g = ifelse(tmp$Growth,      runif(1, 0.01, 1.0), 0.3) # Growth
b0_m = ifelse(tmp$Mortality,   runif(1, 0.01, 1.0), 0.8) # Mort
b0_r = ifelse(tmp$Recruitment, runif(1, 0.05, 1.1), 0.1) # Recruit
disP = ifelse(tmp$Disturbance, runif(1, 0.001, 0.2), 0.01) # Disturbance
return(c(b0_g,
b0_m,
b0_r,
disP,
ricker(K = 100, N0 = 10L, num_generations = 500L, distP = disP,
b0_m = b0_m, b0_r = b0_r, b0_g = b0_g,
b1_m = 0, b1_g = 0)))
})
data = (abind::abind(data, along = 0L))
data = (abind::abind(data, along = 0L))
results = train_function(data, n_response = length(which(unlist(tmp) == 1, arr.ind = TRUE)), epochs = 10L, device = dev, split =0.7)
length(which(unlist(tmp) == 1, arr.ind = TRUE))
